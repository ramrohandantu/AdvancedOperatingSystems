import java.io.*;
import java.net.*;
import java.util.*;




public class Project1 
{
	public static int port;
	public static int nodes;
	public static int nodeId;
	private static int nextHop;
	private static int servPort;
	private static String servDcXX;

	public static int randInt(int min, int max)
	{
		Random rand = new Random();
		int randomNum = rand.nextInt((max-min) + 1) + min;
		return randomNum;
	}

	public static void main(String args[])
	{
		
		nodes = Integer.parseInt(args[2]);
		int[] matrix;
		matrix = new int[nodes*nodes];
		nodeId = Integer.parseInt(args[0]);
		String path = new String("");
		

		for(int i=0;i<nodes;i++){
			for(int j=0;j<nodes;j++){
				matrix[nodes*i+j]=0;
			}
		}
			
		String[] dc;
		dc = new String[nodes];
		int[] prt = new int[nodes];
		int tokenNumber = 0;
		int totalTokens = 1;
		int hopNumber = 1;
		int totalHops = 0;
		int rand = randInt(1,10);
		
		String netId = "rxd132730";
		String config_file = args[4];
		String config = config_file.split(".txt")[0];
		config = config.split("/")[config.split("/").length-1];
		System.out.println("name of config: "+config);
		//System.out.println(config_file.split(".txt")[0]);
		String fileName = config+"-"+netId+"-"+nodeId+".out";
		String midLine = "Node ID: "+nodeId;
		String firstLine = "# BEGIN filename: "+fileName;
		String secondLine = "Net ID: "+netId;
		String thirdLine = "Listening on "+args[3]+":"+args[1];
		String fourthLine = "Random number: "+rand;
		String writeLine;
		FileWriter fw = null;
		BufferedWriter bw = null;
		File file1 = new File(fileName);
		
		try{
			if(!file1.exists()){
				file1.createNewFile();
			}
			fw = new FileWriter(file1,true);
			bw = new BufferedWriter(fw);
			synchronized(bw){
				bw.write(firstLine);
				bw.newLine();
				bw.write(secondLine);
				bw.newLine();
				bw.write(midLine);
				bw.newLine();
				bw.write(thirdLine);
				bw.newLine();
				bw.write(fourthLine);
				bw.newLine();
				//bw.write(fifthLine);
				//bw.newLine();
			}
			//String writeLine;
		}catch(IOException exa){
			exa.printStackTrace();
		}



		//int rand = randInt(1,10);	
		System.out.println("Random Number Generated by "+nodeId+" is "+rand);
		File file = new File(config_file);
		try{
			
			//Start server thread
			port = Integer.parseInt(args[1]);
			goServer goS = new goServer("Server Thread "+ "node :"+nodeId,port,nodeId,rand,bw,config_file);
			goS.start();
			
			
			Scanner in = new Scanner(file);
			int lineCount = 0;
			while(in.hasNextLine()){
				String nxt = in.nextLine();
				if(nxt.length() > 0){ 
					if((nxt.indexOf("#") == -1) && (lineCount >0) && (lineCount<=nodes)){
						System.out.println("lineCount"+lineCount);
						String[] words1 = nxt.split(" ");
						//System.out.println("nodeId:"+nodeId+"nodes:"+nodes);
						System.out.println("nxt"+nxt);
						//System.out.println(nodes+" "+words1[0]+ " "+words1[1]+" "+words1[2]);
						dc[Integer.parseInt(words1[0])]=words1[1];
						int a = Integer.parseInt(words1[2]);
						prt[Integer.parseInt(words1[0])]=a;
					}
					if(nxt.indexOf("#") > 0){
						String[] half = nxt.split("#");
						//System.out.println(half[0]);
						String[] words2 = half[0].split(" ");
						if(words2[0] != null && Integer.parseInt(words2[0])==nodeId){
							int leng = words2.length;
							System.out.println("leng:"+leng);
							path = Integer.toString(tokenNumber)+ "!";
							path += Integer.toString(totalTokens)+"!";
							tokenNumber+=1;
							totalTokens+=1;
							path += Integer.toString(rand)+"!";
							path += Integer.toString(hopNumber)+"!";
							totalHops = leng;
							path += Integer.toString(totalHops)+"!";
							//path +=
							writeLine = "Emitting token "+tokenNumber+" with path ";
							for(int i=1;i<leng;i++){
								//System.out.println("path:"+words2[i-1]);
								//System.out.println(words2[0]+" "+words2[i]+"length: "+words2[i].length());
								matrix[nodes*Integer.parseInt(words2[i-1])+Integer.parseInt(words2[i])]= 1;
								writeLine += words2[i-1]+ " -> ";
								path = path + String.valueOf(words2[i-1])+ ":";
								path = path + dc[Integer.parseInt(words2[i-1])]  + ":";
								path = path + Integer.toString(prt[Integer.parseInt(words2[i-1])]) + "!";
								//matrix[nodes*Integer.parseInt(words2[0])+Integer.parseInt(words2[i])] = 1;
							}
							writeLine += words2[leng-1]+ " -> ";
							path = path + String.valueOf(words2[leng-1])+":";
							path = path + dc[Integer.parseInt(words2[leng-1])]+":";
							path = path + Integer.toString(prt[Integer.parseInt(words2[leng-1])])+"!";
							writeLine += words2[0];
							path = path + String.valueOf(words2[0])+":";
							path = path + dc[Integer.parseInt(words2[0])]+":";
							path = path + Integer.toString(prt[Integer.parseInt(words2[0])]);
							matrix[nodes*Integer.parseInt(words2[leng-1])+Integer.parseInt(words2[0])]=1;
							System.out.println("1path:"+path+"Endpath");
							int count = 1;
							hopNumber = 1;
							for(int i=1;i<Integer.parseInt(path.split("!")[4]);i++){
								if(totalHops>1 && Integer.parseInt(path.split("!")[i+5].split(":")[0])==nodeId){
									count +=1;
									hopNumber +=1;
								}
								if(totalHops>1 && Integer.parseInt(path.split("!")[i+5].split(":")[0])!=nodeId){
									i=5+Integer.parseInt(path.split("!")[4]);
								}
							}
							String[] wordsa = path.split("!");
							int pathLeng = wordsa.length;
							path = "";
							for(int i=0;i<pathLeng;i++){
								if(i==2){
									path += Integer.toString(count * rand) + "!";
								}else{
									
									if(i==pathLeng-1){
										path += wordsa[i];
									}else{
										if(i==3){
											path += Integer.toString(hopNumber) + "!";
										}else{
											path += wordsa[i]+"!";
										}
									}
								}
							}
							System.out.println("2path:"+path+"EndPath");
							
							
							synchronized(bw){
								bw.write(writeLine);
								bw.newLine();
							}
							
							servPort = Integer.parseInt(path.split("!")[5+hopNumber].split(":")[2]);
							servDcXX = path.split("!")[5+hopNumber].split(":")[1];
							goClient goC = new goClient();
							goC.setThreadName("ClientThread running on "+nodeId);
							goC.setPort(servPort);
							goC.setDcXX(servDcXX);
							goC.setPacket(path);
							goC.start();

						}
					}
					if(nxt.indexOf("#") == -1){
						lineCount += 1;
					}
				}
			}
			Thread.sleep(1000*nodes);
			synchronized(bw){
				bw.write("All tokens received");
				bw.newLine();
				bw.write("# END");
			}
			bw.close();
		}catch(FileNotFoundException ex){
			System.out.println("FileNotFound;Nodeid"+args[0]);
		}catch(IOException exb){
			exb.printStackTrace();
		}catch(InterruptedException exc){
			exc.printStackTrace();
		}

	}
} 
